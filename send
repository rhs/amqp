#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

import optparse, os
from client import *

parser = optparse.OptionParser(usage="usage: %prog [options] <address> [<content> ...]",
                               description="send messages")
parser.add_option("-H", "--host",
                  help="host to connect to (default 0.0.0.0)")
parser.add_option("-p", "--port", type=int, default=5672,
                  help="port to connect to (default %default)")
parser.add_option("-l", "--link", help="link name")
parser.add_option("-d", "--detach", action="store_true",
                  help="detach rather than close link")
parser.add_option("-c", "--count", type=int, default=1,
                  help="number of messages to send (default %default)")
parser.add_option("-i", "--stdin", action="store_true",
                  help="read messages from stdin (one message per line)")
parser.add_option("-t", "--trace", default="err",
                  help="enable tracing for specified categories")

opts, args = parser.parse_args()

if not args:
  parser.error("address is required")

addr = args[0]

host = opts.host or os.getenv('AMQP_BROKER') or "0.0.0.0"
conn = Connection()
conn.tracing(*opts.trace.split())
conn.connect(host, opts.port)
conn.open()
ssn = conn.session()
lnk = ssn.sender(addr, name=opts.link)

count = 0
try:
  while opts.count == 0 or count < opts.count:
    if opts.stdin:
      try:
        content = raw_input()
      except EOFError:
        break
    else:
      content = " ".join(args[1:])

    lnk.send(settled=True, fragments=[Fragment(True, True, 0, 0, content)])
    count += 1
except KeyboardInterrupt:
  pass

if opts.detach:
  lnk.detach()
else:
  lnk.close()
ssn.close()
conn.close()

for tag, (local, remote) in lnk.get_unsettled().items():
  print "UNSETTLED:", tag, local, remote
