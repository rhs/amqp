#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
import optparse, socket
from connection import Connection
from session import Session, SessionError, FIXED
from link import LinkError, Receiver, Sender, link
from selector import Acceptor, Selector
from queue import Queue
from util import ConnectionSelectable

class Broker:

  def __init__(self, container_id, window, period):
    self.container_id = container_id
    self.window = window
    self.period = period
    self.nodes = {}
    self.sources = {}
    self.targets = {}

    self.attach = {Sender.role: self.attach_sender,
                   Receiver.role: self.attach_receiver}
    self.process = {Sender.role: self.process_sender,
                    Receiver.role: self.process_receiver}
    self.detach = {Sender.role: self.detach_sender,
                   Receiver.role: self.detach_receiver}

  def timeout(self, connection):
    for ssn in connection.incoming.values() + connection.outgoing.values():
      ssn.set_incoming_window(self.window, FIXED)

  def tick(self, connection):
    if connection.opening():
      connection.open(container_id = self.container_id,
                      channel_max = 65535)

    # XXX
    for ssn in connection.incoming.values():
      if ssn.beginning():
        ssn.begin()
        if self.period:
          ssn.set_incoming_window(self.window, FIXED)
        else:
          ssn.set_incoming_window(self.window)

    for ssn in connection.outgoing.values():
      if ssn.beginning():
        ssn.begin()
        if self.period:
          ssn.set_incoming_window(self.window, FIXED)
        else:
          ssn.set_incoming_window(self.window)

      for link in ssn.links.values():
        if link.attaching():
          if self.attach[link.role](link):
            link.attach()
          else:
            # XXX
            link.modified = True
            link.attach()
            link.detach()

        self.process[link.role](link)

        if link.detaching():
          self.detach[link.role](link)
          link.detach()

        if link.detached():
          ssn.remove(link)

      if ssn.ending():
        ssn.end()
        connection.remove(ssn)

    if connection.closing():
      connection.close()

    connection.tick()

  def attach_sender(self, link):
    if link.name in self.sources:
      source = self.sources[link.name]
      source.resume(link.unsettled or {})
      # XXX: should actually set this to reflect the real source and
      # possibly update the real source
      link.source = link.remote_source
      link.target = link.remote_target
      return True
    elif link.remote_source.address in self.nodes:
      n = self.nodes[link.remote_source.address]
      source = n.source()
      self.sources[link.name] = source
      link.source = link.remote_source
      link.target = link.remote_target
      return True
    else:
      return False

  def attach_receiver(self, link):
    if link.name in self.targets:
      target = self.targets[link.name]
      target.resume(link.unsettled or {})
      link.source = link.remote_source
      # XXX: should actually set this to reflect the real target and
      # possibly update the real target
      link.target = link.remote_target
      return True
    elif link.remote_target.address in self.nodes:
      n = self.nodes[link.remote_target.address]
      target = n.target()
      self.targets[link.name] = target
      if target.capacity():
        link.flow(20)
      link.source = link.remote_source
      link.target = link.remote_target
      return True
    else:
      return False

  def process_sender(self, link):
    if link.source is None: return
    source = self.sources[link.name]
    while link.capacity() > 0:
      tag, xfr = source.get()
      if xfr is None:
        link.drained()
        break
      else:
        link.send(delivery_tag = tag, fragments = xfr.fragments)

    for t, _, r in link.get_remote():
      if r.settled or r.state is not None:
        state = source.settle(t, r.state)
        link.settle(t, state)

  def process_receiver(self, link):
    if link.target is None: return
    target = self.targets[link.name]
    while link.pending():
      xfr = link.get()
      target.put(xfr.delivery_tag, xfr)
      state = target.settle(xfr.delivery_tag)
      link.settle(xfr.delivery_tag, state)
    if target.capacity() and link.credit() < 10: link.flow(10)

  def detach_sender(self, link):
    if link.source and link.remote_source is None:
      source = self.sources.pop(link.name)
      source.close()
      link.source = link.remote_source
      link.target = link.remote_target

  def detach_receiver(self, link):
    if link.target and link.remote_target is None:
      target = self.targets.pop(link.name)
      target.close()
      link.source = link.remote_source
      link.target = link.remote_target

def bind(host, port):
  sock = socket.socket()
  sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
  sock.bind((host, port))
  sock.listen(5)
  sock.setblocking(0)
  return sock

parser = optparse.OptionParser(usage="usage: %prog [options] QUEUE_1 ... QUEUE_n",
                               description="Prototype amqp broker.")
parser.add_option("-i", "--interface", default="0.0.0.0",
                  help="interface to listen on (default %default)")
parser.add_option("-c", "--container", default=socket.gethostname(),
                  help="container-id for the broker (default %default)")
parser.add_option("-n", "--nodes", default=[], action="append",
                  help="load nodes from specified file")
parser.add_option("-p", "--port", type=int, default=5672,
                  help="port to listen on (default %default)")
parser.add_option("-w", "--window", type=int, default=65536,
                  help="session window size")
parser.add_option("-e", "--period", type=float, default=None,
                  help="update period for session window")
parser.add_option("-t", "--trace", default="err",
                  help="enable tracing for specified categories")
parser.add_option("-T", "--threshold", dest="thresholds", default=[],
                  action="append", metavar="NAME=THRESHOLD",
                  help="specify flow control threshold for a queue")
parser.add_option("-g", "--graphics", action="store_true",
                  help="launch the broker with graphics enabled")

opts, args = parser.parse_args()

if opts.graphics:
  from window import Window
else:
  class Window:
    def __init__(self, *args, **kwargs):
      pass
    def add(self, *args, **kwargs):
      raise RuntimeError("graphics are not enabled")
    def redraw(self):
      pass

try:
  broker = Broker(opts.container, opts.window, opts.period)
  selector = Selector()
  window = Window(lambda *args: selector.stop())

  def tick(c):
    broker.tick(c)
    window.redraw()

  def timeout(c):
    broker.timeout(c)

  nodes = {}
  for n in opts.nodes:
    exec open(n) in globals(), nodes

  for name, value in nodes.items():
    if name.startswith("_"):
      continue
    broker.nodes[name] = value

  thresholds = {}
  for value in opts.thresholds:
    name, threshold = value.split("=", 2)
    thresholds[name] = int(threshold)

  for a in args:
    broker.nodes[a] = Queue(thresholds.get(a))

  sock = bind(opts.interface, opts.port)

  def handler(accepted):
    conn = Connection(lambda properties: Session(link, properties))
    conn.tracing(*opts.trace.split())
    selector.register(ConnectionSelectable(accepted, conn, tick,
                                           period=opts.period, timeout=timeout))

  selector.register(Acceptor(sock, handler))
  if opts.graphics:
    selector.run(window.redraw, 0.1)
  else:
    selector.run()
except KeyboardInterrupt:
  pass
