#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
import optparse, socket
from connection import Connection
from session import Session, SessionError
from link import LinkError, Receiver, Sender, link
from selector import Acceptor, Selector
from queue import Queue
from util import ConnectionSelectable

class Broker:

  def __init__(self, container_id):
    self.container_id = container_id
    self.nodes = {}
    self.sources = {}
    self.targets = {}

    self.attach = {Sender.role: self.attach_sender,
                   Receiver.role: self.attach_receiver}
    self.process = {Sender.role: self.process_sender,
                    Receiver.role: self.process_receiver}
    self.detach = {Sender.role: self.detach_sender,
                   Receiver.role: self.detach_receiver}

  def tick(self, connection):
    if connection.opening():
      connection.open(container_id = self.container_id,
                      channel_max = 65535)

    # XXX
    for ssn in connection.incoming.values():
      if ssn.beginning():
        ssn.begin()

    for ssn in connection.outgoing.values():
      for link in ssn.links.values():
        if link.opening():
          if self.attach[link.role](link):
            link.local = link.remote
            link.attach()
          else:
            link.local = None
            # XXX
            link.modified = True
            link.attach()
            link.detach()

        # XXX
        if link.local:
          self.process[link.role](link)

        if link.closing():
          link.detach()

        if link.closed():
          self.detach[link.role](link)
          ssn.remove(link)

      if ssn.ending():
        ssn.end()
        connection.remove(ssn)

    if connection.closing():
      connection.close()

    connection.tick()

  def attach_sender(self, link):
    if link.name in self.sources:
      source = self.sources[link.name]
      source.resume(link.unsettled or {})
      return True
    elif link.remote.source in self.nodes:
      n = self.nodes[link.remote.source]
      source = n.source()
      self.sources[link.name] = source
      return True
    else:
      return False

  def attach_receiver(self, link):
    if link.name in self.targets:
      target = self.sources[link.name]
      target.resume(link.unsettled or {})
      return True
    elif link.remote.target in self.nodes:
      n = self.nodes[link.remote.target]
      target = n.target()
      self.targets[link.name] = target
      if target.capacity():
        link.flow(20)
      return True
    else:
      return False

  def process_sender(self, link):
    source = self.sources[link.name]
    while link.capacity() > 0:
      tag, xfr = source.get()
      if xfr is None:
        link.drained()
        break
      else:
        link.send(delivery_tag = tag, fragments = xfr.fragments)

    for t, _, r in link.get_remote():
      if r.settled or r.state is not None:
        state = source.settle(t, r.state)
        link.settle(t, state)

  def process_receiver(self, link):
    target = self.targets[link.name]
    while link.pending():
      xfr = link.get()
      target.put(xfr.delivery_tag, xfr)
      state = target.settle(xfr.delivery_tag)
      link.settle(xfr.delivery_tag, state)
    if target.capacity() and link.capacity() < 10: link.flow(10)

  def detach_sender(self, link):
    if link.remote is None and link.local:
      source = self.sources.pop(link.name)
      source.close()

  def detach_receiver(self, link):
    if link.remote is None and link.local:
      target = self.targets.pop(link.name)
      target.close()

def bind(host, port):
  sock = socket.socket()
  sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
  sock.bind((host, port))
  sock.listen(5)
  sock.setblocking(0)
  return sock

parser = optparse.OptionParser(usage="usage: %prog [options] QUEUE_1 ... QUEUE_n",
                               description="Prototype amqp broker.")
parser.add_option("-i", "--interface", default="0.0.0.0",
                  help="interface to listen on (default %default)")
parser.add_option("-c", "--container", default=socket.gethostname(),
                  help="container-id for the broker (default %default)")
parser.add_option("-n", "--nodes", default=[], action="append",
                  help="load nodes from specified file")
parser.add_option("-p", "--port", type=int, default=5672,
                  help="port to listen on (default %default)")
parser.add_option("-t", "--trace", default="err",
                  help="enable tracing for specified categories")
parser.add_option("-T", "--threshold", dest="thresholds", default=[],
                  action="append", metavar="NAME=THRESHOLD",
                  help="specify flow control threshold for a queue")

opts, args = parser.parse_args()

try:
  broker = Broker(opts.container)

  thresholds = {}
  for value in opts.thresholds:
    name, threshold = value.split("=", 2)
    thresholds[name] = int(threshold)

  nodes = {}
  for n in opts.nodes:
    exec open(n) in globals(), nodes

  for name, value in nodes.items():
    if name.startswith("_"):
      continue
    broker.nodes[name] = value

  for a in args:
    broker.nodes[a] = Queue(thresholds.get(a))

  selector = Selector()
  sock = bind(opts.interface, opts.port)

  def handler(accepted):
    conn = Connection(lambda properties: Session(link, properties))
    conn.tracing(*opts.trace.split())
    selector.register(ConnectionSelectable(accepted, conn, broker.tick))

  selector.register(Acceptor(sock, handler))
  selector.run()
except KeyboardInterrupt:
  pass
