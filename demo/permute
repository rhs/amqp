#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

import sys, time
from common import *

conn = Connection(auth=True)
host, port, user, pw = BRADDRS[RH]
#conn.tracing("frm")
conn.connect(host, port)
conn.open(mechanism="PLAIN", username=user, password=pw)
ssn = conn.session()
lnk = ssn.sender("control")

NODES = {}
idx = 1
for v in VENDORS:
  NODES[v] = "node%s" % idx
  idx += 1

def node(c, b):
  nd = NODES[c]
  if b is MS:
    if nd == "node4":
      nd = "node9"
    nd = "sb://int7001sbuser-0-9.servicebus.int7.windows-int.net/" + nd
  return nd

COUNTER = 0

def counter():
  global COUNTER
  COUNTER += 1
  return COUNTER

def send(msg):
  print msg
  lnk.send(msg, settled=True)

def settle():
  while lnk.pending(True):
    for t, l, r in lnk.pending():
      print t, r.state
      lnk.settle(t, r.state)

def reset_all():
  send(reset())

def setup(clients, brokers, delay=None):
  for c in clients:
    for b in brokers:
      bh, bp, bu, bw = BRADDRS[b]
      bp = str(bp)
      send(create_link(node(c, b), "receiver", "%s-via-%s" % (c, b), bh, bp, bu, bw, target=c))
      if (b is MS) and delay: time.sleep(delay)
      for cc in clients:
        send(create_link(node(c, b), "sender", "%s-to-%s-via-%s" % (cc, c, b), bh, bp, bu, bw, target=cc))
        if (b is MS) and delay: time.sleep(delay)

def permute(start, stop, via, count=1, delay=None):
  for c2 in stop:
    for c1 in start:
      for b in via:
        for i in range(count):
          send(send_message("%s-to-%s-via-%s" % (c1, c2, b), "%s:%s:%s" % (c1, b, counter()), target=c1))
      if delay: time.sleep(delay)

def self_ping(clients, brokers):
  for c in clients:
    permute([c], [c], brokers)

def proprietary(vendors):
  for v in vendors:
    permute([v], [v], [v])

ACTIONS = {
  "reset": reset_all,
  "setup": lambda: setup(CLIENTS, BROKERS, delay=1),
  "proprietary": lambda: proprietary(BROKERS),
  "interop": lambda: (permute([RH], [MS], [VM]), permute([MS], [RH], [VM])),
  "all": lambda: permute(CLIENTS, CLIENTS, BROKERS),
  "self-ping": self_ping
  }

ACTIONS[sys.argv[1]]()

settle()

lnk.close()
ssn.close()
conn.close()

for tag, local, remote in lnk.get_unsettled():
  print "UNSETTLED:", tag, local, remote
